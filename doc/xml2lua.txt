==============================================================================
Introduction                                                         *mod.intro*

 Module providing a non-validating XML stream parser in Lua.

 Features:
 =========

     * Tokenises well-formed XML (relatively robustly)
     * Flexible handler based event API (see below)
     * Parses all XML Infoset elements - ie.
         - Tags
         - Text
         - Comments
         - CDATA
         - XML Decl
         - Processing Instructions
         - DOCTYPE declarations
     * Provides limited well-formedness checking
       (checks for basic syntax & balanced tags only)
     * Flexible whitespace handling (selectable)
     * Entity Handling (selectable)

 Limitations:
 ============

     * Non-validating
     * No charset handling
     * No namespace support
     * Shallow well-formedness checking only (fails
       to detect most semantic errors)

 API:
 ====

 The parser provides a partially object-oriented API with
 functionality split into tokeniser and handler components.

 The handler instance is passed to the tokeniser and receives
 callbacks for each XML element processed (if a suitable handler
 function is defined). The API is conceptually similar to the
 SAX API but implemented differently.

 XML data is passed to the parser instance through the 'parse'
 method (Note: must be passed a single string currently)

 License:
 ========

     This code is freely distributable under the terms of the [MIT license](LICENSE).


@author Paul Chakravarti (paulc@passtheaardvark.com)
@author Manoel Campos da Silva Filho

xml2lua.parser({handler})                                       *xml2lua.parser*
    Instantiates a XmlParser object to parse a XML string

    Parameters: ~
        {handler}  (table)  Handler module to be used to convert the XML string
                            to another formats. See the available handlers at the handler directory.
                            Usually you get an instance to a handler module using, for instance:
                            local handler = require("xmlhandler/tree").

    Returns: ~
        (xml2lua.XmlParser)  XmlParser object used to parse the XML

    See: ~
        |xml2lua.XmlParser|


xml2lua.printable({tb})                                      *xml2lua.printable*
    Recursivelly prints a table in an easy-to-ready format

    Parameters: ~
        {tb}  (table)  The table to be printed


xml2lua.toString({t})                                         *xml2lua.toString*
    Handler to generate a string prepresentation of a table
    Convenience function for printHandler (Does not support recursive tables).

    Parameters: ~
        {t}  (table)  Table to be parsed

    Returns: ~
        (string)  string representation of the table


xml2lua.loadFile({xmlFilePath})                               *xml2lua.loadFile*
    Loads an XML file from a specified path

    Parameters: ~
        {xmlFilePath}  (string)  the path for the XML file to load

    Returns: ~
        (string)  XML loaded file content


xml2lua.getSpaces()                                          *xml2lua.getSpaces*


xml2lua.addTagValueAttr()                              *xml2lua.addTagValueAttr*


xml2lua.startTag()                                            *xml2lua.startTag*


xml2lua.endTag()                                                *xml2lua.endTag*


xml2lua.isChildArray()                                    *xml2lua.isChildArray*


xml2lua.isTableEmpty()                                    *xml2lua.isTableEmpty*


xml2lua.parseTableToXml()                              *xml2lua.parseTableToXml*


xml2lua.toXml()                                                  *xml2lua.toXml*

    Returns: ~
        (string)  String representing the table content in XML


xml2lua.handler                                                *xml2lua.handler*

    Fields: ~
        {parseAttributes}  (boolean)
        {starttag}         (fun(self:xml2lua.handler,tag:{name:string,attrs:table},s:number,e:number))
        {endtag}           (fun(self:xml2lua.handler,tag:{name:string,attrs:table},s:number,e:number))
        {text}             (fun(self:xml2lua.handler,text:string,next?:function,s:number,e:number))
        {cdata}            (fun(self:xml2lua.handler,cdata:string,next?:function,s:number,e:number))
        {comment}          (fun(self:xml2lua.handler,cdata:string,next?:function,s:number,e:number))
        {decl}             (fun(self:xml2lua.handler,tag:{name:string,attrs:table},s:number,e:number))
        {pi}               (fun(self:xml2lua.handler,tag:{name:string,attrs:table},s:number,e:number))
        {dtd}              (fun(self:xml2lua.handler,tag:{name:string,attrs:table},s:number,e:number))


xml2lua.XmlParser.options                            *xml2lua.XmlParser.options*

    Fields: ~
        {stripWS?}         (boolean)
        {expandEntities?}  (boolean)
        {errorHandler?}    (function)


xml2lua.XmlParser.xmlTag                              *xml2lua.XmlParser.xmlTag*

    Fields: ~
        {pos}        (integer)
        {match?}     (integer)
        {endMatch?}  (integer)
        {errStart?}  (integer)
        {errEnd?}    (integer)
        {extStart?}  (integer)
        {extEnd?}    (integer)
        {endt1?}     (string)   EndTag1 ?
        {endt2?}     (string)   EndTag2 ?
        {tagstr?}    (string)
        {text?}      (string)


xml2lua.XmlParser                                            *xml2lua.XmlParser*

    Fields: ~
        {handler}  (xml2lua.handler)
        {options}  (xml2lua.XmlParser.options)
        {_stack}   (table)


XmlParser.new({_handler}, {_options})                            *XmlParser.new*
    Instantiates a XmlParser object.

    Parameters: ~
        {_handler}  (xml2lua.handler)            Handler module to be used to convert the XML string
                                                 to another formats. See the available handlers at the handler directory.
                                                 Usually you get an instance to a handler module using, for instance:
                                                 local handler = require("xmlhandler/tree").
        {_options}  (xml2lua.XmlParser.options)  Options for this XmlParser instance.

    Returns: ~
        (xml2lua.XmlParser)

    See: ~
        |XmlParser.options|


                                                               *XmlParser:parse*
XmlParser:parse({xml}, {parseAttributes?})
    Main function which starts the XML parsing process

    Parameters: ~
        {xml}               (string)   the XML string to parse
        {parseAttributes?}  (boolean)  Indicates if tag attributes should be parsed or not
                                       If omitted, the default value is true


vim:tw=78:ts=8:noet:ft=help:norl:
