==============================================================================
Introduction                                                         *mod.intro*

 Module providing a non-validating XML stream parser in Lua.

 Features:
 =========

     * Tokenises well-formed XML (relatively robustly)
     * Flexible handler based event API (see below)
     * Parses all XML Infoset elements - ie.
         - Tags
         - Text
         - Comments
         - CDATA
         - XML Decl
         - Processing Instructions
         - DOCTYPE declarations
     * Provides limited well-formedness checking
       (checks for basic syntax & balanced tags only)
     * Flexible whitespace handling (selectable)
     * Entity Handling (selectable)

 Limitations:
 ============

     * Non-validating
     * No charset handling
     * No namespace support
     * Shallow well-formedness checking only (fails
       to detect most semantic errors)

 API:
 ====

 The parser provides a partially object-oriented API with
 functionality split into tokeniser and handler components.

 The handler instance is passed to the tokeniser and receives
 callbacks for each XML element processed (if a suitable handler
 function is defined). The API is conceptually similar to the
 SAX API but implemented differently.

 XML data is passed to the parser instance through the 'parse'
 method (Note: must be passed a single string currently)

 License:
 ========

     This code is freely distributable under the terms of the [MIT license](LICENSE).


@author Paul Chakravarti (paulc@passtheaardvark.com)
@author Manoel Campos da Silva Filho

xml2lua.parser({handler})                                       *xml2lua.parser*
    Instantiates a XmlParser object to parse a XML string

    Parameters: ~
        {handler}  (table)  Handler module to be used to convert the XML string
                            to another formats. See the available handlers at the handler directory.
                            Usually you get an instance to a handler module using, for instance:
                            local handler = require("xmlhandler/tree").

    Returns: ~
        (xml2lua.XmlParser)  XmlParser object used to parse the XML

    See: ~
        |XmlParser|


xml2lua.printable({tb})                                      *xml2lua.printable*
    Recursivelly prints a table in an easy-to-ready format

    Parameters: ~
        {tb}  (table)  The table to be printed


xml2lua.toString({t})                                         *xml2lua.toString*
    Handler to generate a string prepresentation of a table
    Convenience function for printHandler (Does not support recursive tables).

    Parameters: ~
        {t}  (table)  Table to be parsed

    Returns: ~
        (string)  string representation of the table


xml2lua.loadFile({xmlFilePath})                               *xml2lua.loadFile*
    Loads an XML file from a specified path

    Parameters: ~
        {xmlFilePath}  (string)  the path for the XML file to load

    Returns: ~
        (string)  XML loaded file content


xml2lua.getSpaces()                                          *xml2lua.getSpaces*


xml2lua.addTagValueAttr()                              *xml2lua.addTagValueAttr*


xml2lua.startTag()                                            *xml2lua.startTag*


xml2lua.endTag()                                                *xml2lua.endTag*


xml2lua.isChildArray()                                    *xml2lua.isChildArray*


xml2lua.isTableEmpty()                                    *xml2lua.isTableEmpty*


xml2lua.parseTableToXml()                              *xml2lua.parseTableToXml*


xml2lua.toXml()                                                  *xml2lua.toXml*


    Returns: ~
        (string)  String representing the table content in XML


xml2lua.XmlParser.options                            *xml2lua.XmlParser.options*

    Fields: ~
        {stripWS}  (boolean)


xml2lua.XmlParser.xmlTag                              *xml2lua.XmlParser.xmlTag*

    Fields: ~
        {pos}        (integer)
        {match?}     (integer)
        {endMatch?}  (integer)
        {errStart?}  (integer)
        {errEnd?}    (integer)
        {extStart?}  (integer)
        {extEnd?}    (integer)
        {endt1?}     (string)
        {endt2?}     (string)
        {tagstr?}    (string)
        {text?}      (string)


xml2lua.XmlParser                                            *xml2lua.XmlParser*

    Fields: ~
        {handler}  (xml2lua.handler)
        {options}  (xml2lua.XmlParser.options)
        {_stack}   (table)


XmlParser.new({_handler}, {_options})                            *XmlParser.new*
    Instantiates a XmlParser object.

    Parameters: ~
        {_handler}  (xml2lua.handler)  Handler module to be used to convert the XML string
                                                      to another formats. See the available handlers at the handler directory.
                                                      Usually you get an instance to a handler module using, for instance:
                                                      local handler = require("xmlhandler/tree").
        {_options}  ({})               Options for this XmlParser instance.

    Returns: ~
        (xml2lua.XmlParser)

    See: ~
        |XmlParser.options|


XmlParser:parse()                                              *XmlParser:parse*
           If omitted, the default value is true.


dom:new()                                                              *dom:new*
    Instantiates a new handler object.
     Each instance can handle a single XML.
     By using such a constructor, you can parse
     multiple XML files in the same application.
     @return xml2lua.handler the handler instance


dom:starttag()                                                    *dom:starttag*


dom:endtag()                                                        *dom:endtag*


dom:text()                                                            *dom:text*


dom:comment()                                                      *dom:comment*


dom:pi()                                                                *dom:pi*


dom:decl()                                                            *dom:decl*


dom:dtd()                                                              *dom:dtd*


dom:toXml()                                                          *dom:toXml*


xml2lua.handler                                                *xml2lua.handler*

    Fields: ~
        {parseAttributes}  (boolean)


print:starttag({tag}, {s}, {e})                                 *print:starttag*
    Parses a start tag.

    Parameters: ~
        {tag}  ({name:string,attrs:table})  where name is the name of the tag and attrs
                                            is a table containing the atributtes of the tag
        {s}    (xml2lua.XmlParser.xmlTag)   position where the tag starts
        {e}    (xml2lua.XmlParser.xmlTag)   position where the tag ends


print:endtag({tag}, {s}, {e})                                     *print:endtag*
    Parses an end tag.

    Parameters: ~
        {tag}  ({name:string,attrs:table})  where name is the name of the tag and attrs
                                            is a table containing the atributtes of the tag
        {s}    (xml2lua.XmlParser.xmlTag)   position where the tag starts
        {e}    (xml2lua.XmlParser.xmlTag)   position where the tag ends


print:text({s}, {e})                                                *print:text*

    Parameters: ~
        {s}  (xml2lua.XmlParser.xmlTag)  position where the tag starts
        {e}  (xml2lua.XmlParser.xmlTag)  position where the tag ends


print:cdata({s}, {e})                                              *print:cdata*

    Parameters: ~
        {s}  (xml2lua.XmlParser.xmlTag)  position where the tag starts
        {e}  (xml2lua.XmlParser.xmlTag)  position where the tag ends


print:comment()                                                  *print:comment*


print:dtd()                                                          *print:dtd*


print:pi()                                                            *print:pi*


print:decl()                                                        *print:decl*


tree:new()                                                            *tree:new*
    Instantiates a new handler object.
    Each instance can handle a single XML.
    By using such a constructor, you can parse
    multiple XML files in the same application.

    Returns: ~
        (xml2lua.handler)  handler instance


tree:reduce()                                                      *tree:reduce*


tree:starttag()                                                  *tree:starttag*


tree:endtag()                                                      *tree:endtag*


tree:text()                                                          *tree:text*


vim:tw=78:ts=8:noet:ft=help:norl:
