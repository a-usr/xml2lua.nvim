xml2lua.parser({handler})                                       *xml2lua.parser*
    Instantiates a XmlParser object to parse a XML string

    Parameters: ~
        {handler}  (table)  Handler module to be used to convert the XML string
                            to another formats. See the available handlers at the handler directory.
                             Usually you get an instance to a handler module using, for instance:
                             local handler = require("xmlhandler/tree").

    Returns: ~
        (xml2lua.XmlParser)  XmlParser object used to parse the XML

    See: ~
        |XmlParser|


xml2lua.printable()                                          *xml2lua.printable*


xml2lua.toString()                                            *xml2lua.toString*


xml2lua.loadFile()                                            *xml2lua.loadFile*


xml2lua.getSpaces()                                          *xml2lua.getSpaces*


xml2lua.addTagValueAttr()                              *xml2lua.addTagValueAttr*


xml2lua.startTag()                                            *xml2lua.startTag*


xml2lua.endTag()                                                *xml2lua.endTag*


xml2lua.isChildArray()                                    *xml2lua.isChildArray*


xml2lua.isTableEmpty()                                    *xml2lua.isTableEmpty*


xml2lua.parseTableToXml()                              *xml2lua.parseTableToXml*


xml2lua.toXml()                                                  *xml2lua.toXml*


xml2lua.XmlParser.options                            *xml2lua.XmlParser.options*

    Fields: ~
        {stripWS}  (boolean)


xml2lua.XmlParser.xmlTag                              *xml2lua.XmlParser.xmlTag*

    Fields: ~
        {pos}        (integer)
        {match?}     (integer)
        {endMatch?}  (integer)
        {errStart?}  (integer)
        {errEnd?}    (integer)
        {extStart?}  (integer)
        {extEnd?}    (integer)
        {endt1?}     (string)
        {endt2?}     (string)
        {tagstr?}    (string)
        {text?}      (string)


xml2lua.XmlParser                                            *xml2lua.XmlParser*

    Fields: ~
        {handler}  (xml2lua.handler)
        {options}  (xml2lua.XmlParser.options)
        {_stack}   (table)


XmlParser.new()                                                  *XmlParser.new*
     Instantiates a XmlParser object.
     @param _handler xml2lua.handler Handler module to be used to convert the XML string
                    to another formats. See the available handlers at the handler directory.
                    Usually you get an instance to a handler module using, for instance:
                    local handler = require("xmlhandler/tree").
     @param _options {} Options for this XmlParser instance.
     @return xml2lua.XmlParser
     @see XmlParser.options


XmlParser:parse()                                              *XmlParser:parse*
     Main function which starts the XML parsing process
     @param xml string the XML string to parse
     @param parseAttributes boolean? indicates if tag attributes should be parsed or not.
            If omitted, the default value is true.


dom:new()                                                              *dom:new*
    Instantiates a new handler object.
     Each instance can handle a single XML.
     By using such a constructor, you can parse
     multiple XML files in the same application.
     @return xml2lua.handler the handler instance


dom:starttag()                                                    *dom:starttag*


dom:endtag()                                                        *dom:endtag*


dom:text()                                                            *dom:text*


dom:comment()                                                      *dom:comment*


dom:pi()                                                                *dom:pi*


dom:decl()                                                            *dom:decl*


dom:dtd()                                                              *dom:dtd*


dom:toXml()                                                          *dom:toXml*


xml2lua.handler                                                *xml2lua.handler*

    Fields: ~
        {parseAttributes}  (boolean)


print:starttag()                                                *print:starttag*
    Parses a start tag.
     @param tag {name: string, attrs: table}
     where name is the name of the tag and attrs
     is a table containing the atributtes of the tag
     @param s xml2lua.XmlParser.xmlTag position where the tag starts
     @param e xml2lua.XmlParser.xmlTag position where the tag ends


print:endtag()                                                    *print:endtag*
    Parses an end tag.
     @param tag {name: string, attrs: table}
     where name is the name of the tag and attrs
     is a table containing the atributtes of the tag
     @param s xml2lua.XmlParser.xmlTag position where the tag starts
     @param e xml2lua.XmlParser.xmlTag position where the tag ends


print:text()                                                        *print:text*
    Parses a tag content.
     @param text string text to process
     @param next function? ?
     @param s xml2lua.XmlParser.xmlTag position where the tag starts
     @param e xml2lua.XmlParser.xmlTag position where the tag ends


print:cdata()                                                      *print:cdata*
    Parses CDATA tag content.
     @param text string CDATA content to be processed
     @param next function? ?
     @param s xml2lua.XmlParser.xmlTag position where the tag starts
     @param e xml2lua.XmlParser.xmlTag position where the tag ends


print:comment()                                                  *print:comment*


print:dtd()                                                          *print:dtd*


print:pi()                                                            *print:pi*


print:decl()                                                        *print:decl*


tree:new()                                                            *tree:new*
    Instantiates a new handler object.
     Each instance can handle a single XML.
     By using such a constructor, you can parse
     multiple XML files in the same application.
     @return xml2lua.handler the handler instance


tree:reduce()                                                      *tree:reduce*


tree:starttag()                                                  *tree:starttag*


tree:endtag()                                                      *tree:endtag*


tree:text()                                                          *tree:text*


vim:tw=78:ts=8:noet:ft=help:norl:
